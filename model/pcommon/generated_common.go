// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "model/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "go run model/internal/cmd/pdatagen/main.go".

package pcommon

import (
	otlpcommon "go.opentelemetry.io/collector/model/internal/data/protogen/common/v1"
	"go.opentelemetry.io/collector/model/internal/pdata"
)

// InstrumentationLibrary is a message representing the instrumentation library information.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewInstrumentationLibrary function to create new instances.
// Important: zero-initialized instance is not valid for use.
type InstrumentationLibrary struct {
	pdata.InstrumentationLibrary
}

// NewInstrumentationLibrary creates a new empty InstrumentationLibrary.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewInstrumentationLibrary() InstrumentationLibrary {
	return InstrumentationLibrary{pdata.NewInstrumentationLibrary(&otlpcommon.InstrumentationLibrary{})}
}

// MoveTo moves all properties from the current struct to dest
// resetting the current instance to its zero value
func (ms InstrumentationLibrary) MoveTo(dest InstrumentationLibrary) {
	ms.InstrumentationLibrary.MoveTo(dest.InstrumentationLibrary)
}

// CopyTo copies all properties from the current struct to the dest.
func (ms InstrumentationLibrary) CopyTo(dest InstrumentationLibrary) {
	ms.InstrumentationLibrary.CopyTo(dest.InstrumentationLibrary)
}

// AttributeValueSlice logically represents a slice of AttributeValue.
//
// This is a reference type. If passed by value and callee modifies it, the
// caller will see the modification.
//
// Must use NewAttributeValueSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type AttributeValueSlice struct {
	pdata.AttributeValueSlice
}

// NewAttributeValueSlice creates a AttributeValueSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewAttributeValueSlice() AttributeValueSlice {
	orig := []otlpcommon.AnyValue(nil)
	return AttributeValueSlice{pdata.NewAttributeValueSlice(&orig)}
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//   for i := 0; i < es.Len(); i++ {
//       e := es.At(i)
//       ... // Do something with the element
//   }
func (es AttributeValueSlice) At(ix int) AttributeValue {
	return AttributeValue{es.AttributeValueSlice.At(ix)}
}

// CopyTo copies all elements from the current slice to the dest.
func (es AttributeValueSlice) CopyTo(dest AttributeValueSlice) {
	es.AttributeValueSlice.CopyTo(dest.AttributeValueSlice)
}

// AppendEmpty will append to the end of the slice an empty AttributeValue.
// It returns the newly added AttributeValue.
func (es AttributeValueSlice) AppendEmpty() AttributeValue {
	return AttributeValue{es.AttributeValueSlice.AppendEmpty()}
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es AttributeValueSlice) MoveAndAppendTo(dest AttributeValueSlice) {
	es.AttributeValueSlice.MoveAndAppendTo(dest.AttributeValueSlice)
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es AttributeValueSlice) RemoveIf(f func(AttributeValue) bool) {
	es.AttributeValueSlice.RemoveIf(func(av pdata.AttributeValue) bool {
		return f(AttributeValue{av})
	})
}
